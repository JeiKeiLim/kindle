input_size: [32, 32]
input_channel: 3

depth_multiple: 1.0
width_multiple: 0.5

backbone:
    # [from, repeat, module, args]
    [
        [-1, 1, Identity, []],
        # Conv argument: [out_channel, kernel_size, stride, padding_size]
        # if padding_size is not given or null, the padding_size will be auto adjusted as padding='SAME' in TensorFlow
        [-1, 1, nn.Conv2d, [16, 3, 1, 1]],
        [-1, 2, nn.Conv2d, [16, 3, 1, 1]],
        [-1, 1, nn.BatchNorm2d, []],
        [-1, 1, nn.ReLU, []],
        [-1, 1, nn.Conv2d, [32, 3, 1], {padding: 1}],
        [-1, 1, nn.BatchNorm2d, []],
        [-1, 1, nn.ReLU, []],
        # MaxPool argument: [kernel_size, stride, padding_size]
        [-1, 1, nn.MaxPool2d, [2]],
        [-1, 1, nn.Upsample, [], {scale_factor: 2.0}],
        [-1, 1, nn.Conv2d, [16, 3, 2, 1]],
        [-1, 1, nn.BatchNorm2d, []],
        [-1, 1, nn.ReLU, []],
        [1, 1, nn.Conv2d, [16, 3, 2, 1]],
        [1, 3, nn.Conv2d, [16, 3, 1, 1]],
        [-1, 1, nn.BatchNorm2d, []],
        [-1, 1, nn.ReLU, []],
        # Concat argument: [axis]
        [[-1, 9], 1, Concat, [1]],
        [-1, 3, DWConv, [64, 3, 1]],
        [-1, 1, nn.AvgPool2d, [3, 2, 1]],
        [-1, 1, GlobalAvgPool, []],

        [-1, 1, Flatten, []],
        # Linear argument: [out_channel, activation]
        [-1, 1, nn.Linear, [64]],
        [-1, 1, nn.ReLU, []],
        # [-1, 1, Linear, [128, ReLU]],
        [[-1, 21], 1, Concat, [1]],

        [-1, 1, Linear, [10, Softmax]]
    ]
